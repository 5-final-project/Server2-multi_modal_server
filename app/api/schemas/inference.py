from pydantic import BaseModel, Field, HttpUrl
from typing import Optional, List, Union, Literal

# --- Input Schemas ---

class InferenceInputParameters(BaseModel):
    """ Parameters that can be passed alongside the prompt and files. """
    system_prompt: Optional[str] = Field(None, description="Optional system prompt to guide the model's behavior. If generating audio, the specific Qwen audio prompt might be required.")
    return_audio: bool = Field(False, description="Whether to generate and return audio output along with text.")
    use_audio_in_video: bool = Field(True, description="Whether to process audio tracks within uploaded video files.")
    speaker: Optional[Literal["Chelsie", "Ethan"]] = Field(None, description="Specify the voice for audio output ('Chelsie' or 'Ethan'). Defaults to Chelsie if audio is returned.")
    max_new_tokens: Optional[int] = Field(512, description="Maximum number of new tokens to generate.")

# Note: We use Form(...) in the endpoint for prompt and parameters when dealing with file uploads.
# This schema is useful for defining the expected parameters conceptually and potentially for validation if not using Form.


# --- Response Schemas ---

class InferenceResponse(BaseModel):
    """
    Schema for the response data from a successful inference call (sync or async result).
    """
    generated_text: str = Field(..., description="The text generated by the model.")
    generated_audio_path: Optional[str] = Field(None, description="Relative path to the generated audio file within the server's configured audio output directory, if audio was requested and generated.")
    # Potentially add more details like input tokens, output tokens, latency etc.


class AsyncTaskResponse(BaseModel):
    """
    Schema for the response when a task is queued.
    """
    task_id: str = Field(..., description="The ID of the background task processing the inference request.")
    status: str = Field("PENDING", description="Initial status of the task.")


class TaskStatusResponse(BaseModel):
    """
    Schema for checking the status of a background task.
    """
    task_id: str = Field(..., description="The ID of the background task.")
    status: str = Field(..., description="Current status of the task (e.g., PENDING, STARTED, SUCCESS, FAILURE).")
    result: Optional[Union[InferenceResponse, dict]] = Field(None, description="The result of the task if completed successfully (as InferenceResponse), or error details if failed.")
